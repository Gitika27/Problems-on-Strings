package com.practiceProblems.java;

import java.util.*;

public class LongestSubstringWithKCharacters {
	
	public static int longestSubstring(String s, int k) {
		
		HashMap<Character,Integer> d = new HashMap<>();
		
		int ans = -1;
		
		int i = 0;
		int j = 0;
		
		while (i<=j && j<s.length()) {
			
			d.put(s.charAt(j), d.getOrDefault(s.charAt(j), 0)+1);

			while (d.size() > k) {
				d.put(s.charAt(i), d.getOrDefault(s.charAt(i), 0) - 1);
				if(d.get(s.charAt(i)) == 0) {
					d.remove(s.charAt(i));
				}
				i+=1;
			}
			

			if(d.size() == k) {
				ans = Math.max(ans, j-i+1);
				System.out.println(s.substring(i,j+1));
				
			}
			j+=1;
			
			
		}
		
		
		return ans;
	}

	public static void main(String[] args) {
		
		String s = "aabacbebebe";
		int n = s.length();
		int k = 3;
		int ans = 0;
		
		// brute force approach
		
		for(int i = 0; i < n; i++ ) {
			HashSet<Character> set = new HashSet<>();
			for(int j = i; j<n; j++) {
				set.add(s.charAt(j));
				
				if(set.size() == k) {
					ans = Math.max(ans, j-i+1);
					//System.out.println(s.substring(i,j+1));
				}
				else if (set.size() > k) {
					break;
				}
			}
		}
		
		int a = longestSubstring(s,k);
		
		System.out.println(a);

	}

}

Output:
aabac
aabacb
cbe
cbeb
cbebe
cbebeb
cbebebe
7
