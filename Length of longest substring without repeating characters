package com.practice.examples.dsa;

import java.util.*;

public class LongestSubstringWithoutRepeatingCharacters {

    public static int lengthOfLongestSubstring_bruteForce(String s) {
        int length = 0;
        int n = s.length();
        //Brute force approach
        
        for(int i = 0; i < n; i++ ) {
        	HashSet<Character> set = new HashSet<>();
        	for(int j = i; j < n; j++) {
        		if(set.contains(s.charAt(j))) {
        			break;
        		}
        		else {
        			set.add(s.charAt(j));
        			length = Math.max(length,j-i+1);
     
        		}
        	}
        }
        
        return length;
    }
	
    public static int lengthOfLongestSubstring(String s) {
        int length = 0;
        int n = s.length();
        HashSet<Character> set = new HashSet<>();
        int i = 0;
        int j = 0;
        
        while ( i <= j && j < n) {
        	
        	if(set.contains(s.charAt(j))) {
        		set.remove(s.charAt(i));
        		i+=1;
        	}
        	else {
        		set.add(s.charAt(j));
        		length = Math.max(length, j-i+1);
        		j+=1;
        	}
        	
        }
        
        return length;
    }
    
    
	public static void main(String[] args) {
		String s = "abcabcbb";
		System.out.println(lengthOfLongestSubstring(s));
		
	}

}

Output: 3 
